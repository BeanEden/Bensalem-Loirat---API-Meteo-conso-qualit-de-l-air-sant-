import os
import requests
from pymongo import MongoClient
from dotenv import load_dotenv
from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta  


# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# Récupérer les clés API et URL depuis le fichier .env
mongodb_uri = os.getenv("MONGODB_URL")
api_url = os.getenv("API_URL")

# Fonction pour récupérer et insérer les données dans MongoDB
def fetch_and_insert_data():
    # Configurer MongoDB
    client = MongoClient(mongodb_uri)
    db = client['API_Project']  # Nom de la base de données
    collection = db['Consommation_energetique']  # Nom de la collection
    
    # Envoyer la requête pour obtenir les données
    response = requests.get(api_url)
    
    if response.status_code == 200:
        # Les données sont au format CSV, nous allons les traiter
        content = response.text
        rows = content.splitlines()
        
        # Enlève les en-têtes CSV
        headers = rows[0].split(';')
        
        # Supprimer toutes les anciennes données dans la collection 
        collection.delete_many({})
        
        # Insérer les nouvelles données
        for row in rows[1:]:
            values = row.split(';')
            document = {headers[i]: values[i] for i in range(len(headers))}
            collection.insert_one(document)  # Insérer chaque ligne comme un document séparé
        print("Données insérées avec succès dans la collection 'Consommation_energetique'")
    else:
        print(f"Erreur lors de l'appel API: {response.status_code} - {response.text}")
    
    # Fermer la connexion MongoDB
    client.close()

# Définir le DAG
default_args = {
    'owner': 'airflow',
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

with DAG(
    'api_tomongodb',
    default_args=default_args,
    description='Récupérer les données de l\'API et les insérer dans MongoDB',
    schedule_interval='@daily',  
    start_date=datetime(2024, 11, 15),
    catchup=False,
) as dag:
    
    # Définir la tâche pour récupérer et insérer les données
    insert_data_task = PythonOperator(
        task_id='fetch_and_insert_data',
        python_callable=fetch_and_insert_data,
    )

# Définir l'ordre d'exécution des tâches 
insert_data_task
